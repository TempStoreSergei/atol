"""
REST API endpoint'—ã –¥–ª—è –Ω–µ—Ñ–∏—Å–∫–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏
"""
from typing import Optional
from fastapi import APIRouter, Depends
from pydantic import BaseModel, Field

from ..api.redis_client import RedisClient, get_redis_client


router = APIRouter(prefix="/print", tags=["Non-Fiscal Printing"])


# ========== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ==========

class PrintTextRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞"""
    text: str = Field(..., description="–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏")
    alignment: int = Field(0, description="–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (0=–≤–ª–µ–≤–æ, 1=–ø–æ —Ü–µ–Ω—Ç—Ä—É, 2=–≤–ø—Ä–∞–≤–æ)")
    wrap: int = Field(0, description="–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ (0=–Ω–µ—Ç, 1=–ø–æ —Å–ª–æ–≤–∞–º, 2=–ø–æ —Å–∏–º–≤–æ–ª–∞–º)")


class PrintBarcodeRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥–∞"""
    barcode: str = Field(..., description="–î–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
    barcode_type: int = Field(17, description="–¢–∏–ø —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ (17=QR)") # 17 = LIBFPTR_BT_QR
    alignment: int = Field(0, description="–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (0=–≤–ª–µ–≤–æ, 1=–ø–æ —Ü–µ–Ω—Ç—Ä—É, 2=–≤–ø—Ä–∞–≤–æ)")
    scale: int = Field(2, description="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è (1-10)")


class BeepRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"""
    frequency: int = Field(2000, description="–ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞ –≤ –ì—Ü (100-10000)", ge=100, le=10000)
    duration: int = Field(100, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤—É–∫–∞ –≤ –º—Å (10-5000)", ge=10, le=5000)


class StatusResponse(BaseModel):
    """–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    success: bool
    message: Optional[str] = None


# ========== –ü–ï–ß–ê–¢–¨ –¢–ï–ö–°–¢–ê ==========

@router.post("/text")
async def print_text(
    request: PrintTextRequest,
    redis: RedisClient = Depends(get_redis_client)
):
    """
    –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.
    """
    return redis.execute_command('print_text', request.model_dump())


@router.post("/feed")
async def feed_line(
    lines: int = 1,
    redis: RedisClient = Depends(get_redis_client)
):
    """
    –ü—Ä–æ–º–æ—Ç–∞—Ç—å –ª–µ–Ω—Ç—É (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏).
    """
    return redis.execute_command('print_feed', {'lines': lines})


# ========== –ü–ï–ß–ê–¢–¨ –®–¢–†–ò–•–ö–û–î–ê ==========

@router.post("/barcode")
async def print_barcode(
    request: PrintBarcodeRequest,
    redis: RedisClient = Depends(get_redis_client)
):
    """
    –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥.
    """
    return redis.execute_command('print_barcode', request.model_dump())


# ========== –ó–í–£–ö–û–í–´–ï –°–ò–ì–ù–ê–õ–´ ==========

@router.post("/beep", response_model=StatusResponse)
async def beep(
    request: BeepRequest = BeepRequest(),
    redis: RedisClient = Depends(get_redis_client)
):
    """
    –ü–æ–¥–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏–∫ –ö–ö–¢.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **frequency**: –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞ –≤ –ì—Ü (100-10000). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000 –ì—Ü
    - **duration**: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤—É–∫–∞ –≤ –º—Å (10-5000). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –º—Å

    –ü—Ä–∏–º–µ—Ä—ã —á–∞—Å—Ç–æ—Ç:
    - 262 –ì—Ü - –î–æ (C4)
    - 294 –ì—Ü - –†–µ (D4)
    - 330 –ì—Ü - –ú–∏ (E4)
    - 349 –ì—Ü - –§–∞ (F4)
    - 392 –ì—Ü - –°–æ–ª—å (G4)
    - 440 –ì—Ü - –õ—è (A4)
    - 494 –ì—Ü - –°–∏ (B4)
    - 523 –ì—Ü - –î–æ (C5)
    """
    return redis.execute_command('beep', request.model_dump())


@router.post("/play-arcane", response_model=StatusResponse)
async def play_arcane_melody(redis: RedisClient = Depends(get_redis_client)):
    """
    –°—ã–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏—é "Enemy" –∏–∑ —Å–µ—Ä–∏–∞–ª–∞ Arcane —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏–∫ –ö–ö–¢!

    üéµ Everybody wants to be my enemy... üéµ

    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã –∏–∑ Arcane (Imagine Dragons feat. JID).
    –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~15 —Å–µ–∫—É–Ω–¥.

    **–í–Ω–∏–º–∞–Ω–∏–µ**: –í–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–µ–ª–æ–¥–∏–∏ –ö–ö–¢ –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç–∞ –∏ –Ω–µ —Å–º–æ–∂–µ—Ç
    –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ –º–µ–ª–æ–¥–∏—è –∏–≥—Ä–∞–µ—Ç ~15 —Å–µ–∫—É–Ω–¥
    return redis.execute_command('play_arcane_melody', timeout=30)
